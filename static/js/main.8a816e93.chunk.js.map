{"version":3,"sources":["TodoForm.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoForm","state","content","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","length","props","addTask","className","onSubmit","this","type","id","placeholder","onChange","Component","TodoItem","text","isEditing","handleRemove","remove","toggleEdit","handleEdit","edit","handleComplete","complete","onEnter","keyCode","onKeyUp","completed","onClick","TodoList","todos","item","newItem","uuid","removeTask","filter","editTask","newText","newTodos","map","todo","completeTask","newItems","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a816e93.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TodoForm.css';\n\nclass ToDoForm extends Component {\n  state = { content: '' };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.state.content.length > 0) {\n      this.props.addTask(this.state);\n      this.setState({ content: '' });\n    }\n  };\n\n  render() {\n    return (\n      <form className='Todo-form' onSubmit={this.handleSubmit}>\n        <input\n          type='text'\n          id='content'\n          name='content'\n          value={this.state.content}\n          placeholder='Enter new task'\n          onChange={this.handleChange}\n        ></input>\n        <button type='submit'>Add</button>\n      </form>\n    );\n  }\n}\n\nexport default ToDoForm;\n","import React, { Component } from 'react';\nimport './TodoItem.css';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nclass TodoItem extends Component {\n  state = { text: this.props.text, isEditing: false };\n\n  handleRemove = () => {\n    this.props.remove(this.props.id);\n  };\n\n  toggleEdit = () => {\n    this.setState({ isEditing: !this.state.isEditing });\n  };\n\n  handleChange = e => {\n    e.preventDefault();\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleEdit = e => {\n    e.preventDefault();\n    this.props.edit(this.props.id, this.state.text);\n    this.setState({ isEditing: !this.state.isEditing });\n  };\n\n  handleComplete = () => {\n    this.props.complete(this.props.id);\n  };\n\n  onEnter = e => {\n    e.preventDefault();\n    if (e.keyCode === 13) {\n      this.props.edit(this.props.id, this.state.text);\n      this.setState({ isEditing: !this.state.isEditing });\n    }\n  };\n\n  render() {\n    return (\n      <div className='Todo'>\n        {this.state.isEditing ? (\n          <form className='Todo-edit' onSubmit={this.handleEdit}>\n            <TextareaAutosize\n              type='text'\n              name='text'\n              value={this.state.text}\n              onChange={this.handleChange}\n              onKeyUp={this.onEnter}\n            ></TextareaAutosize>\n            <button type='submit'>\n              <i className='fas fa-save'></i>\n            </button>\n          </form>\n        ) : (\n          <div>\n            <li\n              className={\n                this.props.completed ? 'Todo-item Completed' : 'Todo-item'\n              }\n              onClick={this.handleEdit}\n            >\n              {this.props.text}\n            </li>\n          </div>\n        )}\n        <div className='Todo-buttons'>\n          <button onClick={this.handleComplete}>\n            <i className='fas fa-check' />\n          </button>\n          <button onClick={this.toggleEdit}>\n            <i className='fas fa-pen' />\n          </button>\n          <button onClick={this.handleRemove}>\n            <i className='fas fa-trash'></i>\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport TodoForm from './TodoForm';\nimport TodoItem from './TodoItem';\nimport './TodoList.css';\nimport uuid from 'uuid';\n\nclass TodoList extends Component {\n  state = {\n    todos: []\n  };\n\n  addTask = item => {\n    let newItem = { ...item, id: uuid(), completed: false };\n    this.setState({ todos: [...this.state.todos, newItem] });\n  };\n\n  removeTask = id => {\n    this.setState({ todos: this.state.todos.filter(item => item.id !== id) });\n  };\n\n  editTask = (id, newText) => {\n    const newTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        todo.content = newText;\n        return todo;\n      } else return todo;\n    });\n    this.setState({ todos: newTodos });\n  };\n\n  completeTask = id => {\n    const newItems = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n        return todo;\n      } else return todo;\n    });\n    this.setState({ todos: newItems });\n  };\n\n  render() {\n    let todos = this.state.todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        id={todo.id}\n        text={todo.content}\n        remove={this.removeTask}\n        edit={this.editTask}\n        complete={this.completeTask}\n        completed={todo.completed}\n      />\n    ));\n\n    return (\n      <div className='TodoList'>\n        <h1>To-Do List</h1>\n        <h2>a simple React app </h2>\n        <TodoForm addTask={this.addTask} />\n        <ul>{todos}</ul>\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}